<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="7"><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="0.0000%" y="677" width="14.2857%" height="15" fill="rgb(236,228,3)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="0.0000%" y="661" width="14.2857%" height="15" fill="rgb(233,71,16)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="0.0000%" y="645" width="14.2857%" height="15" fill="rgb(239,41,1)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="0.0000%" y="629" width="14.2857%" height="15" fill="rgb(214,119,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="0.0000%" y="613" width="14.2857%" height="15" fill="rgb(213,17,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="0.0000%" y="597" width="14.2857%" height="15" fill="rgb(245,42,20)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">source_code_parser::re..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 14.29%)</title><rect x="0.0000%" y="581" width="14.2857%" height="15" fill="rgb(252,18,22)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50">source_code_parser::re..</text></g><g><title>rune::load::load_sources (1 samples, 14.29%)</title><rect x="0.0000%" y="565" width="14.2857%" height="15" fill="rgb(219,125,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50">rune::load::load_sourc..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 14.29%)</title><rect x="0.0000%" y="549" width="14.2857%" height="15" fill="rgb(215,56,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50">rune::load::load_sourc..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 14.29%)</title><rect x="0.0000%" y="533" width="14.2857%" height="15" fill="rgb(212,211,43)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50">rune::compiling::compi..</text></g><g><title>rune::compiling::v1::assemble::item_fn::&lt;impl rune::compiling::v1::assemble::AssembleFn for rune::ast::item_fn::ItemFn&gt;::assemble_fn (1 samples, 14.29%)</title><rect x="0.0000%" y="517" width="14.2857%" height="15" fill="rgb(225,24,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::block::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::block::Block&gt;::assemble (1 samples, 14.29%)</title><rect x="0.0000%" y="501" width="14.2857%" height="15" fill="rgb(229,104,27)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble (1 samples, 14.29%)</title><rect x="0.0000%" y="485" width="14.2857%" height="15" fill="rgb(208,56,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::Compiler::compile_pat (1 samples, 14.29%)</title><rect x="0.0000%" y="469" width="14.2857%" height="15" fill="rgb(210,79,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50">rune::compiling::v1::C..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble::{{closure}} (1 samples, 14.29%)</title><rect x="0.0000%" y="453" width="14.2857%" height="15" fill="rgb(236,125,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 14.29%)</title><rect x="0.0000%" y="437" width="14.2857%" height="15" fill="rgb(207,101,52)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::expr_call::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr_call::ExprCall&gt;::assemble (1 samples, 14.29%)</title><rect x="0.0000%" y="421" width="14.2857%" height="15" fill="rgb(248,51,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50">rune::compiling::v1::a..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="405" width="14.2857%" height="15" fill="rgb(222,184,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="389" width="14.2857%" height="15" fill="rgb(226,13,15)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="373" width="14.2857%" height="15" fill="rgb(238,108,43)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="357" width="14.2857%" height="15" fill="rgb(252,6,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="341" width="14.2857%" height="15" fill="rgb(215,206,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="325" width="14.2857%" height="15" fill="rgb(243,20,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="309" width="14.2857%" height="15" fill="rgb(213,39,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="293" width="14.2857%" height="15" fill="rgb(225,153,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="277" width="14.2857%" height="15" fill="rgb(235,8,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="261" width="14.2857%" height="15" fill="rgb(215,0,21)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="245" width="14.2857%" height="15" fill="rgb(205,153,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::path::Path as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="229" width="14.2857%" height="15" fill="rgb(231,172,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50">&lt;rune::ast::path::Path..</text></g><g><title>&lt;rune::ast::path::PathSegment as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="0.0000%" y="213" width="14.2857%" height="15" fill="rgb(251,142,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50">&lt;rune::ast::path::Path..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="14.2857%" y="293" width="14.2857%" height="15" fill="rgb(214,48,45)" fg:x="1" fg:w="1"/><text x="14.5357%" y="303.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="14.2857%" y="277" width="14.2857%" height="15" fill="rgb(231,29,28)" fg:x="1" fg:w="1"/><text x="14.5357%" y="287.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="14.2857%" y="261" width="14.2857%" height="15" fill="rgb(245,57,8)" fg:x="1" fg:w="1"/><text x="14.5357%" y="271.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="14.2857%" y="245" width="14.2857%" height="15" fill="rgb(236,199,39)" fg:x="1" fg:w="1"/><text x="14.5357%" y="255.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="14.2857%" y="229" width="14.2857%" height="15" fill="rgb(208,132,35)" fg:x="1" fg:w="1"/><text x="14.5357%" y="239.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="14.2857%" y="213" width="14.2857%" height="15" fill="rgb(225,217,34)" fg:x="1" fg:w="1"/><text x="14.5357%" y="223.50">source_code_parser::re..</text></g><g><title>&lt;source_code_parser::ast::expr::CallExpr as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 14.29%)</title><rect x="14.2857%" y="197" width="14.2857%" height="15" fill="rgb(252,227,26)" fg:x="1" fg:w="1"/><text x="14.5357%" y="207.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::CompiledPattern::match_and_insert (1 samples, 14.29%)</title><rect x="14.2857%" y="181" width="14.2857%" height="15" fill="rgb(250,228,18)" fg:x="1" fg:w="1"/><text x="14.5357%" y="191.50">source_code_parser::re..</text></g><g><title>regex::re_unicode::Regex::captures (1 samples, 14.29%)</title><rect x="14.2857%" y="165" width="14.2857%" height="15" fill="rgb(222,176,49)" fg:x="1" fg:w="1"/><text x="14.5357%" y="175.50">regex::re_unicode::Reg..</text></g><g><title>regex::re_unicode::Regex::captures_read_at (1 samples, 14.29%)</title><rect x="14.2857%" y="149" width="14.2857%" height="15" fill="rgb(212,89,5)" fg:x="1" fg:w="1"/><text x="14.5357%" y="159.50">regex::re_unicode::Reg..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (1 samples, 14.29%)</title><rect x="14.2857%" y="133" width="14.2857%" height="15" fill="rgb(211,131,11)" fg:x="1" fg:w="1"/><text x="14.5357%" y="143.50">&lt;regex::exec::ExecNoSy..</text></g><g><title>regex::dfa::Fsm::next_state (1 samples, 14.29%)</title><rect x="14.2857%" y="117" width="14.2857%" height="15" fill="rgb(226,185,34)" fg:x="1" fg:w="1"/><text x="14.5357%" y="127.50">regex::dfa::Fsm::next_..</text></g><g><title>regex::dfa::Fsm::cached_state (1 samples, 14.29%)</title><rect x="14.2857%" y="101" width="14.2857%" height="15" fill="rgb(239,228,52)" fg:x="1" fg:w="1"/><text x="14.5357%" y="111.50">regex::dfa::Fsm::cache..</text></g><g><title>&lt;source_code_parser::prophet::component::MethodComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (2 samples, 28.57%)</title><rect x="14.2857%" y="325" width="28.5714%" height="15" fill="rgb(213,126,26)" fg:x="1" fg:w="2"/><text x="14.5357%" y="335.50">&lt;source_code_parser::prophet::component::Metho..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (2 samples, 28.57%)</title><rect x="14.2857%" y="309" width="28.5714%" height="15" fill="rgb(248,59,21)" fg:x="1" fg:w="2"/><text x="14.5357%" y="319.50">&lt;source_code_parser::ast::Block as source_code..</text></g><g><title>&lt;source_code_parser::ast::stmt::DeclStmt as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="28.5714%" y="293" width="14.2857%" height="15" fill="rgb(207,10,1)" fg:x="2" fg:w="1"/><text x="28.8214%" y="303.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="28.5714%" y="277" width="14.2857%" height="15" fill="rgb(240,122,43)" fg:x="2" fg:w="1"/><text x="28.8214%" y="287.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="28.5714%" y="261" width="14.2857%" height="15" fill="rgb(250,158,39)" fg:x="2" fg:w="1"/><text x="28.8214%" y="271.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="28.5714%" y="245" width="14.2857%" height="15" fill="rgb(212,108,0)" fg:x="2" fg:w="1"/><text x="28.8214%" y="255.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="28.5714%" y="229" width="14.2857%" height="15" fill="rgb(231,150,38)" fg:x="2" fg:w="1"/><text x="28.8214%" y="239.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="28.5714%" y="213" width="14.2857%" height="15" fill="rgb(249,154,4)" fg:x="2" fg:w="1"/><text x="28.8214%" y="223.50">source_code_parser::re..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="28.5714%" y="197" width="14.2857%" height="15" fill="rgb(219,46,1)" fg:x="2" fg:w="1"/><text x="28.8214%" y="207.50">&lt;hashbrown::raw::RawTa..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="28.5714%" y="181" width="14.2857%" height="15" fill="rgb(227,68,4)" fg:x="2" fg:w="1"/><text x="28.8214%" y="191.50">&lt;hashbrown::raw::RawTa..</text></g><g><title>&lt;source_code_parser::prophet::component::FieldComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="42.8571%" y="293" width="14.2857%" height="15" fill="rgb(254,224,51)" fg:x="3" fg:w="1"/><text x="43.1071%" y="303.50">&lt;source_code_parser::p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="42.8571%" y="277" width="14.2857%" height="15" fill="rgb(220,89,20)" fg:x="3" fg:w="1"/><text x="43.1071%" y="287.50">source_code_parser::re..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 14.29%)</title><rect x="42.8571%" y="261" width="14.2857%" height="15" fill="rgb(245,148,36)" fg:x="3" fg:w="1"/><text x="43.1071%" y="271.50">source_code_parser::re..</text></g><g><title>runestick::context::Context::runtime (1 samples, 14.29%)</title><rect x="42.8571%" y="245" width="14.2857%" height="15" fill="rgb(216,50,30)" fg:x="3" fg:w="1"/><text x="43.1071%" y="255.50">runestick::context::Co..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="42.8571%" y="229" width="14.2857%" height="15" fill="rgb(254,186,48)" fg:x="3" fg:w="1"/><text x="43.1071%" y="239.50">&lt;hashbrown::raw::RawTa..</text></g><g><title>&lt;runestick::const_value::ConstValue as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="42.8571%" y="213" width="14.2857%" height="15" fill="rgb(237,78,54)" fg:x="3" fg:w="1"/><text x="43.1071%" y="223.50">&lt;runestick::const_valu..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="42.8571%" y="197" width="14.2857%" height="15" fill="rgb(208,122,28)" fg:x="3" fg:w="1"/><text x="43.1071%" y="207.50">&lt;alloc::string::String..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="42.8571%" y="181" width="14.2857%" height="15" fill="rgb(237,71,0)" fg:x="3" fg:w="1"/><text x="43.1071%" y="191.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 14.29%)</title><rect x="42.8571%" y="165" width="14.2857%" height="15" fill="rgb(241,168,21)" fg:x="3" fg:w="1"/><text x="43.1071%" y="175.50">alloc::slice::&lt;impl [T..</text></g><g><title>alloc::slice::hack::to_vec (1 samples, 14.29%)</title><rect x="42.8571%" y="149" width="14.2857%" height="15" fill="rgb(252,223,14)" fg:x="3" fg:w="1"/><text x="43.1071%" y="159.50">alloc::slice::hack::to..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 14.29%)</title><rect x="42.8571%" y="133" width="14.2857%" height="15" fill="rgb(228,172,14)" fg:x="3" fg:w="1"/><text x="43.1071%" y="143.50">&lt;T as alloc::slice::ha..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 14.29%)</title><rect x="42.8571%" y="117" width="14.2857%" height="15" fill="rgb(236,44,24)" fg:x="3" fg:w="1"/><text x="43.1071%" y="127.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 14.29%)</title><rect x="42.8571%" y="101" width="14.2857%" height="15" fill="rgb(211,153,1)" fg:x="3" fg:w="1"/><text x="43.1071%" y="111.50">alloc::raw_vec::RawVec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 14.29%)</title><rect x="42.8571%" y="85" width="14.2857%" height="15" fill="rgb(242,70,19)" fg:x="3" fg:w="1"/><text x="43.1071%" y="95.50">alloc::raw_vec::RawVec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 14.29%)</title><rect x="42.8571%" y="69" width="14.2857%" height="15" fill="rgb(237,172,13)" fg:x="3" fg:w="1"/><text x="43.1071%" y="79.50">&lt;alloc::alloc::Global ..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 14.29%)</title><rect x="42.8571%" y="53" width="14.2857%" height="15" fill="rgb(215,222,51)" fg:x="3" fg:w="1"/><text x="43.1071%" y="63.50">alloc::alloc::Global::..</text></g><g><title>alloc::alloc::alloc (1 samples, 14.29%)</title><rect x="42.8571%" y="37" width="14.2857%" height="15" fill="rgb(227,136,3)" fg:x="3" fg:w="1"/><text x="43.1071%" y="47.50">alloc::alloc::alloc</text></g><g><title>_start (4 samples, 57.14%)</title><rect x="14.2857%" y="677" width="57.1429%" height="15" fill="rgb(234,107,46)" fg:x="1" fg:w="4"/><text x="14.5357%" y="687.50">_start</text></g><g><title>__libc_start_main (4 samples, 57.14%)</title><rect x="14.2857%" y="661" width="57.1429%" height="15" fill="rgb(224,56,35)" fg:x="1" fg:w="4"/><text x="14.5357%" y="671.50">__libc_start_main</text></g><g><title>main (4 samples, 57.14%)</title><rect x="14.2857%" y="645" width="57.1429%" height="15" fill="rgb(253,132,31)" fg:x="1" fg:w="4"/><text x="14.5357%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (4 samples, 57.14%)</title><rect x="14.2857%" y="629" width="57.1429%" height="15" fill="rgb(249,97,5)" fg:x="1" fg:w="4"/><text x="14.5357%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4 samples, 57.14%)</title><rect x="14.2857%" y="613" width="57.1429%" height="15" fill="rgb(225,135,20)" fg:x="1" fg:w="4"/><text x="14.5357%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4 samples, 57.14%)</title><rect x="14.2857%" y="597" width="57.1429%" height="15" fill="rgb(220,48,27)" fg:x="1" fg:w="4"/><text x="14.5357%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4 samples, 57.14%)</title><rect x="14.2857%" y="581" width="57.1429%" height="15" fill="rgb(214,91,28)" fg:x="1" fg:w="4"/><text x="14.5357%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4 samples, 57.14%)</title><rect x="14.2857%" y="565" width="57.1429%" height="15" fill="rgb(232,51,16)" fg:x="1" fg:w="4"/><text x="14.5357%" y="575.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (4 samples, 57.14%)</title><rect x="14.2857%" y="549" width="57.1429%" height="15" fill="rgb(254,38,15)" fg:x="1" fg:w="4"/><text x="14.5357%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4 samples, 57.14%)</title><rect x="14.2857%" y="533" width="57.1429%" height="15" fill="rgb(243,186,4)" fg:x="1" fg:w="4"/><text x="14.5357%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4 samples, 57.14%)</title><rect x="14.2857%" y="517" width="57.1429%" height="15" fill="rgb(222,210,21)" fg:x="1" fg:w="4"/><text x="14.5357%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 57.14%)</title><rect x="14.2857%" y="501" width="57.1429%" height="15" fill="rgb(228,132,3)" fg:x="1" fg:w="4"/><text x="14.5357%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (4 samples, 57.14%)</title><rect x="14.2857%" y="485" width="57.1429%" height="15" fill="rgb(253,188,15)" fg:x="1" fg:w="4"/><text x="14.5357%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 57.14%)</title><rect x="14.2857%" y="469" width="57.1429%" height="15" fill="rgb(216,192,40)" fg:x="1" fg:w="4"/><text x="14.5357%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mem_bench::main (4 samples, 57.14%)</title><rect x="14.2857%" y="453" width="57.1429%" height="15" fill="rgb(230,126,2)" fg:x="1" fg:w="4"/><text x="14.5357%" y="463.50">mem_bench::main</text></g><g><title>mem_bench::ressa_benchmark (4 samples, 57.14%)</title><rect x="14.2857%" y="437" width="57.1429%" height="15" fill="rgb(246,23,15)" fg:x="1" fg:w="4"/><text x="14.5357%" y="447.50">mem_bench::ressa_benchmark</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (4 samples, 57.14%)</title><rect x="14.2857%" y="421" width="57.1429%" height="15" fill="rgb(250,224,8)" fg:x="1" fg:w="4"/><text x="14.5357%" y="431.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::analysis::common (4 samples, 57.14%)</title><rect x="14.2857%" y="405" width="57.1429%" height="15" fill="rgb(247,226,46)" fg:x="1" fg:w="4"/><text x="14.5357%" y="415.50">criterion::analysis::common</text></g><g><title>criterion::routine::Routine::sample (4 samples, 57.14%)</title><rect x="14.2857%" y="389" width="57.1429%" height="15" fill="rgb(226,67,43)" fg:x="1" fg:w="4"/><text x="14.5357%" y="399.50">criterion::routine::Routine::sample</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 57.14%)</title><rect x="14.2857%" y="373" width="57.1429%" height="15" fill="rgb(239,37,7)" fg:x="1" fg:w="4"/><text x="14.5357%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>source_code_parser::ressa::run_ressa_parse (4 samples, 57.14%)</title><rect x="14.2857%" y="357" width="57.1429%" height="15" fill="rgb(239,125,3)" fg:x="1" fg:w="4"/><text x="14.5357%" y="367.50">source_code_parser::ressa::run_ressa_parse</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (4 samples, 57.14%)</title><rect x="14.2857%" y="341" width="57.1429%" height="15" fill="rgb(235,59,37)" fg:x="1" fg:w="4"/><text x="14.5357%" y="351.50">&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ress..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (2 samples, 28.57%)</title><rect x="42.8571%" y="325" width="28.5714%" height="15" fill="rgb(241,214,47)" fg:x="3" fg:w="2"/><text x="43.1071%" y="335.50">source_code_parser::ressa::node_pattern::ressa..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (2 samples, 28.57%)</title><rect x="42.8571%" y="309" width="28.5714%" height="15" fill="rgb(214,114,51)" fg:x="3" fg:w="2"/><text x="43.1071%" y="319.50">&lt;source_code_parser::prophet::component::Class..</text></g><g><title>&lt;source_code_parser::prophet::component::MethodComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="57.1429%" y="293" width="14.2857%" height="15" fill="rgb(221,180,19)" fg:x="4" fg:w="1"/><text x="57.3929%" y="303.50">&lt;source_code_parser::p..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="57.1429%" y="277" width="14.2857%" height="15" fill="rgb(223,66,32)" fg:x="4" fg:w="1"/><text x="57.3929%" y="287.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="57.1429%" y="261" width="14.2857%" height="15" fill="rgb(218,134,38)" fg:x="4" fg:w="1"/><text x="57.3929%" y="271.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="57.1429%" y="245" width="14.2857%" height="15" fill="rgb(250,83,11)" fg:x="4" fg:w="1"/><text x="57.3929%" y="255.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="57.1429%" y="229" width="14.2857%" height="15" fill="rgb(239,137,18)" fg:x="4" fg:w="1"/><text x="57.3929%" y="239.50">source_code_parser::re..</text></g><g><title>&lt;source_code_parser::ast::expr::CallExpr as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 14.29%)</title><rect x="57.1429%" y="213" width="14.2857%" height="15" fill="rgb(242,185,53)" fg:x="4" fg:w="1"/><text x="57.3929%" y="223.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::CompiledPattern::match_and_insert (1 samples, 14.29%)</title><rect x="57.1429%" y="197" width="14.2857%" height="15" fill="rgb(244,165,31)" fg:x="4" fg:w="1"/><text x="57.3929%" y="207.50">source_code_parser::re..</text></g><g><title>&lt;regex::exec::Exec as core::clone::Clone&gt;::clone (1 samples, 14.29%)</title><rect x="57.1429%" y="181" width="14.2857%" height="15" fill="rgb(223,129,30)" fg:x="4" fg:w="1"/><text x="57.3929%" y="191.50">&lt;regex::exec::Exec as ..</text></g><g><title>regex::pool::Pool&lt;T&gt;::new (1 samples, 14.29%)</title><rect x="57.1429%" y="165" width="14.2857%" height="15" fill="rgb(240,148,35)" fg:x="4" fg:w="1"/><text x="57.3929%" y="175.50">regex::pool::Pool&lt;T&gt;::..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 14.29%)</title><rect x="57.1429%" y="149" width="14.2857%" height="15" fill="rgb(231,3,24)" fg:x="4" fg:w="1"/><text x="57.3929%" y="159.50">__memmove_avx_unaligne..</text></g><g><title>mem_bench::ressa_benchmark (1 samples, 14.29%)</title><rect x="71.4286%" y="677" width="14.2857%" height="15" fill="rgb(227,197,42)" fg:x="5" fg:w="1"/><text x="71.6786%" y="687.50">mem_bench::ressa_bench..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 14.29%)</title><rect x="71.4286%" y="661" width="14.2857%" height="15" fill="rgb(251,41,31)" fg:x="5" fg:w="1"/><text x="71.6786%" y="671.50">criterion::benchmark_g..</text></g><g><title>criterion::analysis::common (1 samples, 14.29%)</title><rect x="71.4286%" y="645" width="14.2857%" height="15" fill="rgb(207,92,5)" fg:x="5" fg:w="1"/><text x="71.6786%" y="655.50">criterion::analysis::c..</text></g><g><title>criterion::routine::Routine::sample (1 samples, 14.29%)</title><rect x="71.4286%" y="629" width="14.2857%" height="15" fill="rgb(236,62,31)" fg:x="5" fg:w="1"/><text x="71.6786%" y="639.50">criterion::routine::Ro..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 14.29%)</title><rect x="71.4286%" y="613" width="14.2857%" height="15" fill="rgb(248,218,41)" fg:x="5" fg:w="1"/><text x="71.6786%" y="623.50">&lt;core::iter::adapters:..</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 14.29%)</title><rect x="71.4286%" y="597" width="14.2857%" height="15" fill="rgb(250,128,19)" fg:x="5" fg:w="1"/><text x="71.6786%" y="607.50">source_code_parser::re..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="71.4286%" y="581" width="14.2857%" height="15" fill="rgb(239,216,33)" fg:x="5" fg:w="1"/><text x="71.6786%" y="591.50">&lt;source_code_parser::p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="71.4286%" y="565" width="14.2857%" height="15" fill="rgb(216,44,26)" fg:x="5" fg:w="1"/><text x="71.6786%" y="575.50">source_code_parser::re..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::pattern_parser::NodePatternParser&gt;::parse (1 samples, 14.29%)</title><rect x="71.4286%" y="549" width="14.2857%" height="15" fill="rgb(207,69,29)" fg:x="5" fg:w="1"/><text x="71.6786%" y="559.50">&lt;source_code_parser::p..</text></g><g><title>&lt;source_code_parser::prophet::component::FieldComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="71.4286%" y="533" width="14.2857%" height="15" fill="rgb(246,182,38)" fg:x="5" fg:w="1"/><text x="71.6786%" y="543.50">&lt;source_code_parser::p..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="71.4286%" y="517" width="14.2857%" height="15" fill="rgb(252,219,28)" fg:x="5" fg:w="1"/><text x="71.6786%" y="527.50">source_code_parser::re..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 14.29%)</title><rect x="71.4286%" y="501" width="14.2857%" height="15" fill="rgb(209,164,16)" fg:x="5" fg:w="1"/><text x="71.6786%" y="511.50">source_code_parser::re..</text></g><g><title>rune::load::load_sources (1 samples, 14.29%)</title><rect x="71.4286%" y="485" width="14.2857%" height="15" fill="rgb(208,49,15)" fg:x="5" fg:w="1"/><text x="71.6786%" y="495.50">rune::load::load_sourc..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 14.29%)</title><rect x="71.4286%" y="469" width="14.2857%" height="15" fill="rgb(235,42,45)" fg:x="5" fg:w="1"/><text x="71.6786%" y="479.50">rune::load::load_sourc..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 14.29%)</title><rect x="71.4286%" y="453" width="14.2857%" height="15" fill="rgb(246,198,8)" fg:x="5" fg:w="1"/><text x="71.6786%" y="463.50">rune::compiling::compi..</text></g><g><title>rune::compiling::v1::assemble::item_fn::&lt;impl rune::compiling::v1::assemble::AssembleFn for rune::ast::item_fn::ItemFn&gt;::assemble_fn (1 samples, 14.29%)</title><rect x="71.4286%" y="437" width="14.2857%" height="15" fill="rgb(237,205,33)" fg:x="5" fg:w="1"/><text x="71.6786%" y="447.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::block::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::block::Block&gt;::assemble (1 samples, 14.29%)</title><rect x="71.4286%" y="421" width="14.2857%" height="15" fill="rgb(249,116,21)" fg:x="5" fg:w="1"/><text x="71.6786%" y="431.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble (1 samples, 14.29%)</title><rect x="71.4286%" y="405" width="14.2857%" height="15" fill="rgb(230,35,49)" fg:x="5" fg:w="1"/><text x="71.6786%" y="415.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::Compiler::compile_pat (1 samples, 14.29%)</title><rect x="71.4286%" y="389" width="14.2857%" height="15" fill="rgb(207,8,52)" fg:x="5" fg:w="1"/><text x="71.6786%" y="399.50">rune::compiling::v1::C..</text></g><g><title>rune::compiling::v1::assemble::local::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::local::Local&gt;::assemble::{{closure}} (1 samples, 14.29%)</title><rect x="71.4286%" y="373" width="14.2857%" height="15" fill="rgb(218,173,0)" fg:x="5" fg:w="1"/><text x="71.6786%" y="383.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::expr::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr::Expr&gt;::assemble (1 samples, 14.29%)</title><rect x="71.4286%" y="357" width="14.2857%" height="15" fill="rgb(248,106,34)" fg:x="5" fg:w="1"/><text x="71.6786%" y="367.50">rune::compiling::v1::a..</text></g><g><title>rune::compiling::v1::assemble::expr_call::&lt;impl rune::compiling::v1::assemble::Assemble for rune::ast::expr_call::ExprCall&gt;::assemble (1 samples, 14.29%)</title><rect x="71.4286%" y="341" width="14.2857%" height="15" fill="rgb(232,50,11)" fg:x="5" fg:w="1"/><text x="71.6786%" y="351.50">rune::compiling::v1::a..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="325" width="14.2857%" height="15" fill="rgb(213,142,18)" fg:x="5" fg:w="1"/><text x="71.6786%" y="335.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="309" width="14.2857%" height="15" fill="rgb(246,117,38)" fg:x="5" fg:w="1"/><text x="71.6786%" y="319.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="293" width="14.2857%" height="15" fill="rgb(218,133,54)" fg:x="5" fg:w="1"/><text x="71.6786%" y="303.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="277" width="14.2857%" height="15" fill="rgb(216,154,35)" fg:x="5" fg:w="1"/><text x="71.6786%" y="287.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="261" width="14.2857%" height="15" fill="rgb(219,175,36)" fg:x="5" fg:w="1"/><text x="71.6786%" y="271.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="245" width="14.2857%" height="15" fill="rgb(224,0,16)" fg:x="5" fg:w="1"/><text x="71.6786%" y="255.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::path::Path as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="229" width="14.2857%" height="15" fill="rgb(221,186,40)" fg:x="5" fg:w="1"/><text x="71.6786%" y="239.50">&lt;rune::ast::path::Path..</text></g><g><title>&lt;rune::ast::path::PathSegment as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="71.4286%" y="213" width="14.2857%" height="15" fill="rgb(254,0,31)" fg:x="5" fg:w="1"/><text x="71.6786%" y="223.50">&lt;rune::ast::path::Path..</text></g><g><title>all (7 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(206,138,52)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50"></text></g><g><title>mem_bench-08fe4 (7 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(229,99,30)" fg:x="0" fg:w="7"/><text x="0.2500%" y="703.50">mem_bench-08fe4</text></g><g><title>source_code_parser::ressa::run_ressa_parse (1 samples, 14.29%)</title><rect x="85.7143%" y="677" width="14.2857%" height="15" fill="rgb(205,131,29)" fg:x="6" fg:w="1"/><text x="85.9643%" y="687.50">source_code_parser::re..</text></g><g><title>&lt;source_code_parser::prophet::component::ClassOrInterfaceComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="661" width="14.2857%" height="15" fill="rgb(232,114,46)" fg:x="6" fg:w="1"/><text x="85.9643%" y="671.50">&lt;source_code_parser::p..</text></g><g><title>&lt;source_code_parser::prophet::component::MethodComponent as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="645" width="14.2857%" height="15" fill="rgb(206,181,31)" fg:x="6" fg:w="1"/><text x="85.9643%" y="655.50">&lt;source_code_parser::p..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="629" width="14.2857%" height="15" fill="rgb(251,142,12)" fg:x="6" fg:w="1"/><text x="85.9643%" y="639.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="613" width="14.2857%" height="15" fill="rgb(252,128,47)" fg:x="6" fg:w="1"/><text x="85.9643%" y="623.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="597" width="14.2857%" height="15" fill="rgb(208,51,33)" fg:x="6" fg:w="1"/><text x="85.9643%" y="607.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::expr::Expr as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="581" width="14.2857%" height="15" fill="rgb(240,36,11)" fg:x="6" fg:w="1"/><text x="85.9643%" y="591.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::Block as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="565" width="14.2857%" height="15" fill="rgb(245,160,28)" fg:x="6" fg:w="1"/><text x="85.9643%" y="575.50">&lt;source_code_parser::a..</text></g><g><title>&lt;source_code_parser::ast::stmt::DeclStmt as source_code_parser::ressa::explorer::RessaNodeExplorer&gt;::explore (1 samples, 14.29%)</title><rect x="85.7143%" y="549" width="14.2857%" height="15" fill="rgb(230,37,49)" fg:x="6" fg:w="1"/><text x="85.9643%" y="559.50">&lt;source_code_parser::a..</text></g><g><title>source_code_parser::ressa::node_pattern::ressa_node_parse (1 samples, 14.29%)</title><rect x="85.7143%" y="533" width="14.2857%" height="15" fill="rgb(227,40,34)" fg:x="6" fg:w="1"/><text x="85.9643%" y="543.50">source_code_parser::re..</text></g><g><title>source_code_parser::ressa::callback::Executor::execute (1 samples, 14.29%)</title><rect x="85.7143%" y="517" width="14.2857%" height="15" fill="rgb(253,212,23)" fg:x="6" fg:w="1"/><text x="85.9643%" y="527.50">source_code_parser::re..</text></g><g><title>rune::load::load_sources (1 samples, 14.29%)</title><rect x="85.7143%" y="501" width="14.2857%" height="15" fill="rgb(230,155,36)" fg:x="6" fg:w="1"/><text x="85.9643%" y="511.50">rune::load::load_sourc..</text></g><g><title>rune::load::load_sources_with_visitor (1 samples, 14.29%)</title><rect x="85.7143%" y="485" width="14.2857%" height="15" fill="rgb(221,176,6)" fg:x="6" fg:w="1"/><text x="85.9643%" y="495.50">rune::load::load_sourc..</text></g><g><title>rune::compiling::compile_with_options (1 samples, 14.29%)</title><rect x="85.7143%" y="469" width="14.2857%" height="15" fill="rgb(207,203,40)" fg:x="6" fg:w="1"/><text x="85.9643%" y="479.50">rune::compiling::compi..</text></g><g><title>rune::worker::Worker::run (1 samples, 14.29%)</title><rect x="85.7143%" y="453" width="14.2857%" height="15" fill="rgb(215,88,16)" fg:x="6" fg:w="1"/><text x="85.9643%" y="463.50">rune::worker::Worker::..</text></g><g><title>&lt;rune::ast::file::File as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="437" width="14.2857%" height="15" fill="rgb(233,52,54)" fg:x="6" fg:w="1"/><text x="85.9643%" y="447.50">&lt;rune::ast::file::File..</text></g><g><title>&lt;rune::ast::item::Item as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="421" width="14.2857%" height="15" fill="rgb(205,47,52)" fg:x="6" fg:w="1"/><text x="85.9643%" y="431.50">&lt;rune::ast::item::Item..</text></g><g><title>&lt;rune::ast::item_fn::ItemFn as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="405" width="14.2857%" height="15" fill="rgb(218,56,43)" fg:x="6" fg:w="1"/><text x="85.9643%" y="415.50">&lt;rune::ast::item_fn::I..</text></g><g><title>&lt;rune::ast::block::Block as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="389" width="14.2857%" height="15" fill="rgb(251,225,48)" fg:x="6" fg:w="1"/><text x="85.9643%" y="399.50">&lt;rune::ast::block::Blo..</text></g><g><title>&lt;rune::ast::local::Local as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="373" width="14.2857%" height="15" fill="rgb(244,56,1)" fg:x="6" fg:w="1"/><text x="85.9643%" y="383.50">&lt;rune::ast::local::Loc..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::indexing::index::Index&gt;::index (1 samples, 14.29%)</title><rect x="85.7143%" y="357" width="14.2857%" height="15" fill="rgb(215,46,3)" fg:x="6" fg:w="1"/><text x="85.9643%" y="367.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="341" width="14.2857%" height="15" fill="rgb(252,25,51)" fg:x="6" fg:w="1"/><text x="85.9643%" y="351.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="325" width="14.2857%" height="15" fill="rgb(243,86,25)" fg:x="6" fg:w="1"/><text x="85.9643%" y="335.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="309" width="14.2857%" height="15" fill="rgb(223,57,49)" fg:x="6" fg:w="1"/><text x="85.9643%" y="319.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="293" width="14.2857%" height="15" fill="rgb(226,26,11)" fg:x="6" fg:w="1"/><text x="85.9643%" y="303.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="277" width="14.2857%" height="15" fill="rgb(233,166,51)" fg:x="6" fg:w="1"/><text x="85.9643%" y="287.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::expr_field_access::ExprFieldAccess as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="261" width="14.2857%" height="15" fill="rgb(232,145,44)" fg:x="6" fg:w="1"/><text x="85.9643%" y="271.50">&lt;rune::ast::expr_field..</text></g><g><title>&lt;rune::ast::expr::Expr as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="245" width="14.2857%" height="15" fill="rgb(246,98,4)" fg:x="6" fg:w="1"/><text x="85.9643%" y="255.50">&lt;rune::ast::expr::Expr..</text></g><g><title>&lt;rune::ast::path::Path as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="229" width="14.2857%" height="15" fill="rgb(223,187,1)" fg:x="6" fg:w="1"/><text x="85.9643%" y="239.50">&lt;rune::ast::path::Path..</text></g><g><title>&lt;rune::ast::path::PathSegment as rune::spanned::Spanned&gt;::span (1 samples, 14.29%)</title><rect x="85.7143%" y="213" width="14.2857%" height="15" fill="rgb(245,183,34)" fg:x="6" fg:w="1"/><text x="85.9643%" y="223.50">&lt;rune::ast::path::Path..</text></g></svg></svg>