[
  {
    "identifier": "ClassOrInterface",
    "pattern": ".*",
    "auxiliary_pattern": "#{pkg}",
    "subpatterns": [
      {
        "identifier": "Method",
        "pattern": "^main$",
        "auxiliary_pattern": "^void$",
        "subpatterns": [],
        "essential": true
      }
    ],
    "callback": "let pkg = ctx.get_variable(\"pkg\").unwrap();let controller = `API - ${pkg}`;ctx.make_object(controller);ctx.make_tag(pkg, controller);ctx.make_transient(\"allServices\");let array = ctx.get_object(\"allServices\").unwrap();let i = 0;while array.contains_key(`${i}`) { i = i + 1; }ctx.make_attribute(`allServices`, `${i}`, Some(pkg));",
    "essential": true
  },
  {
    "identifier": "ClassOrInterface",
    "pattern": "#{controller}",
    "auxiliary_pattern": "#{package}",
    "subpatterns": [
      {
        "identifier": "Annotation",
        "pattern": "@RequestMapping",
        "auxiliary_pattern": "\"#{endpoint_url_base}\"",
        "subpatterns": [],
        "callback": "",
        "essential": true
      },
      {
        "identifier": "Method",
        "pattern": "#{endpoint_method}",
        "auxiliary_pattern": "#{return_type}",
        "subpatterns": [
          {
            "identifier": "Annotation",
            "pattern": "@#{method_type}Mapping",
            "auxiliary_pattern": "#{endpoint_url_part}",
            "subpatterns": [
              {
                "identifier": "AnnotationValuePair",
                "pattern": "path",
                "auxiliary_pattern": "\"#{endpoint_url_part_path}\"",
                "subpatterns": [],
                "essential": false
              },
              {
                "identifier": "AnnotationValuePair",
                "pattern": "value",
                "auxiliary_pattern": "\"#{endpoint_url_part_path}\"",
                "subpatterns": [],
                "essential": false
              }
            ],
            "callback": "let endpoint_url_part_path = ctx.get_variable(\"endpoint_url_part_path\").unwrap_or(\"\");let endpoint_url_part_value = ctx.get_variable(\"endpoint_url_part_value\").unwrap_or(\"\");let endpoint_url_part = ctx.get_variable(\"endpoint_url_part\").unwrap_or(\"\");endpoint_url_part = endpoint_url_part.replace(\"\\\"\", \"\");let endpoint_url_base = ctx.get_variable(\"endpoint_url_base\").unwrap_or(\"\");if (endpoint_url_part.len()>0){    endpoint_url_base.push_str(endpoint_url_part.clone());}else if (endpoint_url_part_path.len()>0){    endpoint_url_base.push_str(endpoint_url_part_path.clone());}else if (endpoint_url_part_value.len()>0){    endpoint_url_base.push_str(endpoint_url_part_value.clone());}ctx.make_variable(\"endpoint_url\", endpoint_url_base);",
            "essential": true
          }
        ],
        "callback": "let package = ctx.get_variable(\"package\").unwrap();let allServices = ctx.get_object(\"allServices\").unwrap();let i = 0;let controller = ``;while allServices.contains_key(`${i}`) { controller = allServices.get(`${i}`).unwrap().unwrap(); if package == controller || package.starts_with(`${controller}.`) { break; } else { i = i + 1; }}if !allServices.contains_key(`${i}`) { panic(\"Unknown service matched\");}let endpoint_method = `${package}.${ctx.get_variable(\"controller\").unwrap()}#${ctx.get_variable(\"endpoint_method\").unwrap()}`;let return_type = ctx.get_variable(\"return_type\").unwrap_or(\"\");let endpoint_url = ctx.get_variable(\"endpoint_url\").unwrap();if !endpoint_url.starts_with(\"/\") { endpoint_url = \"/\" + endpoint_url;}let method_type = ctx.get_variable(\"method_type\").unwrap_or(\"\");match method_type { \"Post\" => method_type = String::from_str(\"POST\"),\"Get\" => method_type = String::from_str(\"GET\"),\"Put\" => method_type = String::from_str(\"PUT\"),\"Delete\" => method_type = String::from_str(\"DELETE\"),\"Patch\" => method_type = String::from_str(\"PATCH\"),_ => method_type = method_type}let full_endpoint = method_type.clone();full_endpoint.push_str(\" \");full_endpoint.push_str(endpoint_url.clone());full_endpoint.push_str(\" \");let url_itr = endpoint_url.split(\"{\");let stripped_url = url_itr.next().unwrap();for arg_part in url_itr { let arg_part_itr = arg_part.split(\"}\"); let arg_part2 = arg_part_itr.skip(1).next().unwrap(); stripped_url.push_str(\"{}\"); stripped_url.push_str(arg_part2.clone());}let full_path = method_type.clone() + \" \" + stripped_url.clone();ctx.make_transient(full_path);ctx.make_attribute(full_path, \"Controller\", Some(controller));ctx.make_attribute(full_path, \"Endpoint method\", Some(endpoint_method));full_endpoint.push_str(return_type.clone());controller = \"API - \" + controller;ctx.make_object(controller);ctx.make_attribute(controller, endpoint_method, Some(full_endpoint));ctx.make_variable(`endpoint_url_part_path`, ``);ctx.make_variable(`endpoint_url_part`, ``);",
        "essential": true
      }
    ],
    "essential": true
  },
  {
    "identifier": "ClassOrInterface",
    "pattern": "#{service}",
    "auxiliary_pattern": "#{package}",
    "subpatterns": [
      {
        "identifier": "Annotation",
        "pattern": "@Service",
        "subpatterns": [],
        "callback": "",
        "essential": true
      },
      {
        "identifier": "Field",
        "pattern": "#{path_var_name}",
        "subpatterns": [
          {
            "identifier": "Literal",
            "pattern": "(https?://.*):(\\d*)#{path_var_val}/?\"",
            "subpatterns": [],
            "callback": "let path_var_name = ctx.get_variable(\"path_var_name\").unwrap_or(\"\");let path_var_val = ctx.get_variable(\"path_var_val\").unwrap_or(\"\");if path_var_name.len() > 0 && path_var_val.len() > 0 { ctx.make_variable(path_var_name, path_var_val); ctx.make_variable(\"path_var_name\", \"\"); ctx.make_variable(\"path_var_val\", \"\"); }",
            "essential": false
          }
        ],
        "essential": false
      },
      {
        "identifier": "Method",
        "pattern": "#{calling_method}",
        "subpatterns": [
          {
            "identifier": "CallExpr",
            "pattern": "exchange",
            "auxiliary_pattern": "#{somename}",
            "subpatterns": [
              {
                "identifier": "Literal",
                "transparent": true,
                "pattern": "",
                "auxiliary_pattern": "",
                "subpatterns": [
                  {
                    "identifier": "Literal",
                    "pattern": "(https?://.*):(\\d*)#{path_root}/?\"",
                    "subpatterns": [],
                    "callback": "ctx.make_variable(\"found_path\", \"true\");ctx.make_variable(\"lit_is_path\", \"true\");let path_root = ctx.get_variable(\"path_root\").unwrap();ctx.make_variable(\"curr_path\", path_root);",
                    "essential": true
                  },
                  {
                    "identifier": "Ident",
                    "pattern": "#{path_root_ident}",
                    "subpatterns": [],
                    "callback": "let path_root_ident = ctx.get_variable(\"path_root_ident\").unwrap();let found_path = ctx.get_variable(\"found_path\").unwrap_or(\"\");let call_finished = ctx.get_variable(\"call_finished\").unwrap_or(\"\");if found_path.len() == 0 && call_finished.len() == 0 {let path_root_val = ctx.get_variable(path_root_ident.clone()).unwrap_or(\"\");if path_root_val.len() > 0 {ctx.make_variable(\"path_root\", path_root_val);ctx.make_variable(\"curr_path\", path_root_val);ctx.make_variable(\"found_path\", \"true\");ctx.make_variable(\"ident_is_path\", \"true\");}}",
                    "essential": true
                  },
                  {
                    "identifier": "Ident",
                    "pattern": "#{path_ident}",
                    "subpatterns": [],
                    "essential": false,
                    "callback": "let path_root = ctx.get_variable(\"path_root\").unwrap_or(\"\");let found_path = ctx.get_variable(\"found_path\").unwrap_or(\"\");let ident_is_path = ctx.get_variable(\"ident_is_path\").unwrap_or(\"\");let found_path_ident = ctx.get_variable(\"found_path_ident\").unwrap_or(\"\");if (path_root.len() > 0 && found_path.len() > 0 && ident_is_path.len() == 0 && found_path_ident.len() == 0) {    let curr_path = ctx.get_variable(\"curr_path\").unwrap();    let path_ident = ctx.get_variable(\"path_ident\").unwrap();    curr_path.push_str(\"{}\");    ctx.make_variable(\"curr_path\", curr_path);    ctx.make_variable(\"found_path_ident\", \"true\");}if(ident_is_path.len() > 0){ctx.make_variable(\"ident_is_path\", \"\");}"
                  },
                  {
                    "identifier": "Literal",
                    "pattern": "\"#{path_lit}\"",
                    "subpatterns": [],
                    "essential": false,
                    "callback": "let path_root = ctx.get_variable(\"path_root\").unwrap_or(\"\");let found_path = ctx.get_variable(\"found_path\").unwrap_or(\"\");let lit_is_path = ctx.get_variable(\"lit_is_path\").unwrap_or(\"\"); if (path_root.len() > 0 && found_path.len() > 0 && lit_is_path.len() == 0) {    let curr_path = ctx.get_variable(\"curr_path\").unwrap();    let path_lit = ctx.get_variable(\"path_lit\").unwrap_or(\"\");    if path_lit.len() > 0 {curr_path.push_str(path_lit);    ctx.make_variable(\"curr_path\", curr_path);ctx.make_variable(\"found_path_ident\", \"\");}    }ctx.make_variable(\"path_lit\", \"\");"
                  }
                ],
                "essential": true,
                "callback": "ctx.make_variable(\"lit_is_path\", \"\");"
              },
              {
                "identifier": "Ident",
                "pattern": "#{method_ident}(^[A-Z]+$)",
                "subpatterns": [],
                "essential": true,
                "callback": "let path_root = ctx.get_variable(\"path_root\").unwrap_or(\"\"); let found_path = ctx.get_variable(\"found_path\").unwrap_or(\"\"); if (path_root.len() > 0 && found_path.len() > 0) { let pkg = ctx.get_variable(\"package\").unwrap(); let allServices = ctx.get_object(\"allServices\").unwrap(); let i = 0; let service = ``; while allServices.contains_key(`${i}`) { service = allServices.get(`${i}`).unwrap().unwrap(); if pkg == service || pkg.starts_with(`${service}.`) { break; } else { i = i + 1; } } if !allServices.contains_key(`${i}`) { panic(\"Unknown service matched\"); } let method_ident = ctx.get_variable(\"method_ident\").unwrap(); let curr_path = ctx.get_variable(\"curr_path\").unwrap(); let service_calls = \"Calls - \" + service; let full_call = method_ident + \" \" + curr_path; let source_obj = ctx.get_object(full_call).unwrap(); let call_info = source_obj.get(\"Endpoint method\").unwrap().unwrap(); ctx.make_object(service_calls); ctx.make_tag(service, service_calls); ctx.make_attribute(service, full_call, Some(call_info)); } ctx.make_variable(\"found_path\", \"\"); ctx.make_variable(\"found_path_ident\", \"\"); ctx.make_variable(\"path_root\", \"\"); ctx.make_variable(\"curr_path\", \"\"); ctx.make_variable(\"path_root_ident\", \"\"); ctx.make_variable(\"found_path\", \"\"); ctx.make_variable(\"call_finished\", \"\"); ctx.make_variable(\"ident_is_path\", \"\"); ctx.make_variable(\"path_ident\", \"\");"
              }
            ],
            "callback": "ctx.make_variable(\"call_finished\", \"\");",
            "essential": false
          }
        ],
        "essential": false
      }
    ],
    "essential": true
  }
]
